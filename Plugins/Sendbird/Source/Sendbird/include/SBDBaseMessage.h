// Copyright (c) 2021 Sendbird, Inc. All rights reserved.

#ifndef SENDBIRD_SBDBASEMESSAGE_H_
#define SENDBIRD_SBDBASEMESSAGE_H_

#include "SBDUser.h"
#include "SBDTypes.h"
#include "SBDMessageMetaArray.h"

#include <vector>

class SBDBaseChannel;
class FSBDBaseMessage;

/**
 * The `SBDBaseMessage` class represents the base message which is generated by a user or an admin.
 * The `SBDUserMessage`, the `SBDFileMessage` and the `SBDAdminMessage` are derived from this class.
 */
class SBDBaseMessage {
public:
	/**
	 * The type of message.
	 */
	SBDMessageType message_type;

	/**
	 * Unique message ID.
	 */
	uint64_t message_id;

	/**
	 * Channel URL which has this message.
	 */
	std::wstring channel_url;

	/**
	 * Message created time in millisecond(UTC).
	 */
	int64_t created_at;

	/**
	 * Message updated time in millisecond(UTC).
	 */
	int64_t updated_at;

	/**
	 * The type of channel. If this message belongs to a open channel, the value is "open" string. If this channel belongs to a group channel, then the value is "group".
	 */
	std::wstring channel_type;

	/**
	 * mention_type
	 */
	SBDMentionType mention_type;

	/**
	 * Can mention to specific users. If sends a message with this field, the message will be arrived to mentioned users. The default value is null.
	 */
	std::vector<SBDUser> mentioned_users;

	/**
	 * Gets an array of meta arrays sorted by chronological order.
	 */
	std::vector<SBDMessageMetaArray> meta_arrays;

	/**
	 * Checks the channel type is open channel or not.
	 *
	 * @return Returns true, when this is open channel.
	 */
	bool IsOpenChannel();

	/**
	 * Checks the channel type is group channel or not.
	 *
	 * @return Returns true, when this is group channel.
	 */
	bool IsGroupChannel();

	/**
	 * GetMetaArraysWithKeys
	 *
	 * @return Returns an array of meta arrays with keys.
	 */
	std::vector<SBDMessageMetaArray> GetMetaArraysWithKeys(const std::vector<std::wstring>& metaarraykeys);

public:
	virtual ~SBDBaseMessage() {};

protected:
	SBDBaseMessage(const std::string& dict);

private:
	static SBDBaseMessage* BuildFromDict(const std::string& dict);
	static SBDBaseMessage* Build(const std::string& dict, SBDBaseChannel* channel);
	static SBDBaseMessage* BuildFromData(const std::string& data);
	SBDMessageMetaArray* GetMetaArrayByKey(std::wstring key);

	friend FSBDBaseMessage;
};

#endif /* SENDBIRD_SBDBASEMESSAGE_H_ */
